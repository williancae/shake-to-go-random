======== src/types/index.ts =========
export interface Product {
  id: string
  name: string
  image?: string | null
  probability: number
  isActive: boolean
  rotation?: number
  createdAt: string
  updatedAt: string
}

export interface Spin {
  id: string
  productId: string
  timestamp: string
  ipAddress?: string | null
  product?: Product
}

export interface CreateProductInput {
  name: string
  image?: string | null
  probability: number
  isActive?: boolean
  rotation?: number
}

export interface UpdateProductInput {
  name?: string
  image?: string | null
  probability?: number
  isActive?: boolean
  rotation?: number
}

export interface CreateSpinInput {
  productId: string
  ipAddress?: string | null
}

======== src/app/admin/page.tsx =========
'use client'

import { useState, useEffect } from 'react'
import { Product } from '@/types'

interface ProductFormData {
  name: string
  image: string
  probability: number
  isActive: boolean
  rotation?: number
}

export default function AdminPanel() {
  const [products, setProducts] = useState<Product[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [showForm, setShowForm] = useState(false)
  const [editingProduct, setEditingProduct] = useState<Product | null>(null)
  const [formData, setFormData] = useState<ProductFormData>({
    name: '',
    image: '',
    probability: 0,
    isActive: true
  })
  const [validationError, setValidationError] = useState<string>('')
  const [imageSource, setImageSource] = useState<'url' | 'upload'>('url')
  const [uploading, setUploading] = useState(false)
  const [uploadedImagePreview, setUploadedImagePreview] = useState<string>('')

  useEffect(() => {
    fetchProducts()
  }, [])

  const fetchProducts = async () => {
    try {
      const response = await fetch('/api/products')
      const data = await response.json()
      setProducts(Array.isArray(data) ? data : [])
    } catch (error) {
      console.error('Error fetching products:', error)
      setProducts([])
    } finally {
      setIsLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setValidationError('')
    
    // Validation: Check if probability exceeds available percentage
    if (formData.probability > maxAllowed) {
      setValidationError(`A probabilidade n√£o pode exceder ${maxAllowed.toFixed(1)}%. Restam apenas ${maxAllowed.toFixed(1)}% dispon√≠veis.`)
      return
    }
    
    try {
      const url = editingProduct ? `/api/products/${editingProduct.id}` : '/api/products'
      const method = editingProduct ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      if (response.ok) {
        await fetchProducts()
        setShowForm(false)
        setEditingProduct(null)
        setFormData({ name: '', image: '', probability: 0, isActive: true, rotation: 0 })
        setValidationError('')
        setImageSource('url')
        setUploadedImagePreview('')
      } else {
        console.error('Error saving product')
      }
    } catch (error) {
      console.error('Error saving product:', error)
    }
  }

  const handleEdit = (product: Product) => {
    setEditingProduct(product)
    setFormData({
      name: product.name,
      image: product.image || '',
      probability: product.probability,
      isActive: product.isActive,
      rotation: product.rotation || 0
    })
    // Determine if current image is uploaded or URL
    setImageSource(product.image?.startsWith('/images/') ? 'upload' : 'url')
    setUploadedImagePreview(product.image?.startsWith('/images/') ? product.image : '')
    setShowForm(true)
  }

  const handleDelete = async (id: string) => {
    if (confirm('Tem certeza que deseja deletar este produto?')) {
      try {
        const response = await fetch(`/api/products/${id}`, {
          method: 'DELETE',
        })

        if (response.ok) {
          await fetchProducts()
        } else {
          console.error('Error deleting product')
        }
      } catch (error) {
        console.error('Error deleting product:', error)
      }
    }
  }

  const handleFileUpload = async (file: File) => {
    if (!file) return

    setUploading(true)
    setValidationError('')

    try {
      const formData = new FormData()
      formData.append('file', file)

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      })

      const result = await response.json()

      if (response.ok) {
        setFormData(prev => ({ ...prev, image: result.path }))
        setUploadedImagePreview(result.path)
      } else {
        setValidationError(result.error || 'Erro ao fazer upload da imagem')
      }
    } catch (error) {
      console.error('Upload error:', error)
      setValidationError('Erro ao fazer upload da imagem')
    } finally {
      setUploading(false)
    }
  }

  const handleRotateImageInModal = () => {
    const currentRotation = formData.rotation || 0
    const newRotation = (currentRotation + 90) % 360
    setFormData(prev => ({ ...prev, rotation: newRotation }))
  }

  const getRotationLabel = (rotation: number) => {
    switch (rotation) {
      case 0: return 'Normal'
      case 90: return 'Direita'
      case 180: return 'Baixo'
      case 270: return 'Esquerda'
      default: return `${rotation}¬∞`
    }
  }

  const handleDistributeRemainder = async () => {
    if (remainingPercentage <= 0 || products.length === 0) return
    
    const activeProducts = products.filter(p => p.isActive)
    if (activeProducts.length === 0) return
    
    const distributionPerProduct = remainingPercentage / activeProducts.length
    
    // Show confirmation dialog
    const confirmMessage = `
Confirmar distribui√ß√£o autom√°tica?

Isso ir√° distribuir ${remainingPercentage.toFixed(1)}% igualmente entre ${activeProducts.length} produtos ativos.
Cada produto receber√° aproximadamente +${distributionPerProduct.toFixed(1)}%.

Produtos que ser√£o afetados:
${activeProducts.map(p => `‚Ä¢ ${p.name}: ${p.probability}% ‚Üí ${(p.probability + distributionPerProduct).toFixed(1)}%`).join('\n')}
    `
    
    if (!confirm(confirmMessage)) return
    
    let remainder = remainingPercentage
    
    try {
      const updatePromises = activeProducts.map((product, index) => {
        // For the last product, give it all the remaining percentage to ensure exact 100%
        const additionalPercentage = index === activeProducts.length - 1 
          ? remainder 
          : Math.floor(distributionPerProduct * 10) / 10
        
        remainder -= additionalPercentage
        
        return fetch(`/api/products/${product.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            ...product,
            probability: Math.round((product.probability + additionalPercentage) * 10) / 10
          })
        })
      })
      
      await Promise.all(updatePromises)
      await fetchProducts()
    } catch (error) {
      console.error('Error distributing remainder:', error)
    }
  }

  const totalProbability = Array.isArray(products) ? products.filter(p => p.isActive).reduce((sum, p) => sum + p.probability, 0) : 0
  const remainingPercentage = 100 - totalProbability
  
  const calculateMaxAllowedProbability = () => {
    if (editingProduct) {
      // When editing, add back the current product's probability to get available space
      return remainingPercentage + editingProduct.probability
    }
    return remainingPercentage
  }
  
  const maxAllowed = calculateMaxAllowedProbability()

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">Carregando...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Painel Administrativo</h1>
              <p className="text-gray-600 mt-1">Shake To Go - Gerenciamento de Produtos</p>
            </div>
            <button
              onClick={() => setShowForm(true)}
              className="btn-primary"
            >
              Adicionar Produto
            </button>
          </div>

          {/* Probability Summary Card */}
          <div className={`border rounded-lg p-4 mb-6 ${
            totalProbability === 100 
              ? 'bg-green-50 border-green-200' 
              : totalProbability > 100 
                ? 'bg-red-50 border-red-200'
                : 'bg-yellow-50 border-yellow-200'
          }`}>
            <div className="flex items-center justify-between">
              <div>
                <h3 className={`text-sm font-medium ${
                  totalProbability === 100 
                    ? 'text-green-800' 
                    : totalProbability > 100 
                      ? 'text-red-800'
                      : 'text-yellow-800'
                }`}>
                  {totalProbability === 100 
                    ? '‚úÖ Probabilidades Balanceadas' 
                    : totalProbability > 100 
                      ? '‚ö†Ô∏è Probabilidades Excedem 100%'
                      : 'üìä Distribui√ß√£o de Probabilidades'}
                </h3>
                <div className={`mt-2 text-sm ${
                  totalProbability === 100 
                    ? 'text-green-700' 
                    : totalProbability > 100 
                      ? 'text-red-700'
                      : 'text-yellow-700'
                }`}>
                  <p>
                    Total atual: <strong>{totalProbability.toFixed(1)}%</strong>
                    {remainingPercentage > 0 && (
                      <span> ‚Ä¢ Dispon√≠vel: <strong>{remainingPercentage.toFixed(1)}%</strong></span>
                    )}
                    {remainingPercentage < 0 && (
                      <span> ‚Ä¢ Excesso: <strong>{Math.abs(remainingPercentage).toFixed(1)}%</strong></span>
                    )}
                  </p>
                </div>
              </div>
              <div className="text-right">
                <div className={`text-2xl font-bold ${
                  totalProbability === 100 
                    ? 'text-green-600' 
                    : totalProbability > 100 
                      ? 'text-red-600'
                      : 'text-yellow-600'
                }`}>
                  {totalProbability.toFixed(1)}%
                </div>
                <div className="text-xs text-gray-500">de 100%</div>
              </div>
            </div>
            
            {/* Visual Progress Bar */}
            <div className="mt-4">
              <div className="w-full bg-gray-200 rounded-full h-3">
                <div 
                  className={`h-3 rounded-full transition-all duration-300 ${
                    totalProbability === 100 
                      ? 'bg-green-500' 
                      : totalProbability > 100 
                        ? 'bg-red-500'
                        : 'bg-yellow-500'
                  }`}
                  style={{ width: `${Math.min(totalProbability, 100)}%` }}
                ></div>
                {totalProbability > 100 && (
                  <div className="text-xs text-red-600 mt-1">
                    Excesso de {(totalProbability - 100).toFixed(1)}% precisa ser redistribu√≠do
                  </div>
                )}
              </div>
              
              {/* Auto-distribute button */}
              {remainingPercentage > 0 && products.filter(p => p.isActive).length > 0 && (
                <div className="mt-3 flex justify-end">
                  <button
                    onClick={handleDistributeRemainder}
                    className="text-sm bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 transition-colors"
                  >
                    Distribuir {remainingPercentage.toFixed(1)}% restante entre produtos ativos
                  </button>
                </div>
              )}
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Produto
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Imagem
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Probabilidade
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    A√ß√µes
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {Array.isArray(products) && products.map((product) => (
                  <tr key={product.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{product.name}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {product.image ? (
                        <div className="relative">
                          <img 
                            src={product.image} 
                            alt={product.name} 
                            className="h-12 w-12 object-cover rounded"
                            style={{ 
                              transform: `rotate(${product.rotation || 0}deg)`,
                              transition: 'transform 0.3s ease'
                            }}
                          />
                          {product.rotation && (
                            <div className="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                              {product.rotation}¬∞
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="h-12 w-12 bg-gray-200 rounded flex items-center justify-center">
                          <span className="text-gray-400 text-xs">Sem imagem</span>
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{product.probability}%</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        product.isActive 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {product.isActive ? 'Ativo' : 'Inativo'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEdit(product)}
                          className="text-indigo-600 hover:text-indigo-900"
                          title="Editar produto"
                        >
                          Editar
                        </button>
                        <button
                          onClick={() => handleDelete(product.id)}
                          className="text-red-600 hover:text-red-900"
                          title="Deletar produto"
                        >
                          Deletar
                        </button>
                      </div>
                    </td>
                  </tr>
                )) || null}
              </tbody>
            </table>
          </div>

          {(!Array.isArray(products) || products.length === 0) && (
            <div className="text-center py-12">
              <p className="text-gray-500">Nenhum produto cadastrado ainda.</p>
            </div>
          )}
        </div>
      </div>

      {showForm && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex items-center justify-center">
          <div className="relative mx-auto p-6 border w-full max-w-md shadow-lg rounded-md bg-white max-h-[90vh] overflow-y-auto">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                {editingProduct ? 'Editar Produto' : 'Adicionar Produto'}
              </h3>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nome do Produto
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Imagem do Produto
                  </label>
                  
                  {/* Image Source Selector */}
                  <div className="flex space-x-4 mb-3">
                    <label className="flex items-center">
                      <input
                        type="radio"
                        value="url"
                        checked={imageSource === 'url'}
                        onChange={(e) => {
                          setImageSource('url')
                          setUploadedImagePreview('')
                          if (imageSource === 'upload') {
                            setFormData({...formData, image: '', rotation: 0})
                          }
                        }}
                        className="mr-2"
                      />
                      <span className="text-sm">URL da imagem</span>
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        value="upload"
                        checked={imageSource === 'upload'}
                        onChange={(e) => {
                          setImageSource('upload')
                          if (imageSource === 'url') {
                            setFormData({...formData, image: '', rotation: 0})
                          }
                        }}
                        className="mr-2"
                      />
                      <span className="text-sm">Upload de arquivo</span>
                    </label>
                  </div>

                  {/* URL Input */}
                  {imageSource === 'url' && (
                    <input
                      type="url"
                      placeholder="https://exemplo.com/imagem.jpg"
                      value={formData.image}
                      onChange={(e) => setFormData({...formData, image: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                    />
                  )}

                  {/* File Upload */}
                  {imageSource === 'upload' && (
                    <div>
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => {
                          const file = e.target.files?.[0]
                          if (file) {
                            handleFileUpload(file)
                          }
                        }}
                        disabled={uploading}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 disabled:bg-gray-100"
                      />
                      {uploading && (
                        <div className="mt-2 text-sm text-blue-600">
                          Fazendo upload...
                        </div>
                      )}
                    </div>
                  )}

                  {/* Image Preview with Rotation Control */}
                  {(formData.image || uploadedImagePreview) && (
                    <div className="mt-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
                      <div className="flex items-start space-x-4">
                        {/* Image Preview */}
                        <div className="flex-shrink-0">
                          <div className="relative">
                            <img
                              src={formData.image || uploadedImagePreview}
                              alt="Preview"
                              className="w-24 h-24 object-cover rounded-lg border border-gray-300 transition-transform duration-300"
                              style={{
                                transform: `rotate(${formData.rotation || 0}deg)`
                              }}
                              onError={(e) => {
                                e.currentTarget.style.display = 'none'
                              }}
                            />
                            {formData.rotation !== 0 && (
                              <div className="absolute -top-2 -right-2 bg-blue-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center">
                                {formData.rotation}¬∞
                              </div>
                            )}
                          </div>
                        </div>
                        
                        {/* Rotation Controls */}
                        <div className="flex-1">
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Rota√ß√£o da Imagem
                          </label>
                          <div className="space-y-2">
                            <div className="flex items-center space-x-3">
                              <button
                                type="button"
                                onClick={handleRotateImageInModal}
                                className="flex items-center space-x-2 px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                              >
                                <span>üîÑ</span>
                                <span>Girar 90¬∞</span>
                              </button>
                              <span className="text-sm text-gray-600">
                                <strong>{getRotationLabel(formData.rotation || 0)}</strong>
                              </span>
                            </div>
                            <div className="text-xs text-gray-500">
                              Clique para girar a imagem. Atual: {formData.rotation || 0}¬∞
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Probabilidade (%) - M√°ximo dispon√≠vel: {maxAllowed.toFixed(1)}%
                  </label>
                  <div className="relative">
                    <input
                      type="number"
                      required
                      min="0"
                      max={maxAllowed}
                      step="0.1"
                      value={formData.probability}
                      onChange={(e) => {
                        const value = parseFloat(e.target.value) || 0
                        setFormData({...formData, probability: value})
                        if (value > maxAllowed) {
                          setValidationError(`M√°ximo permitido: ${maxAllowed.toFixed(1)}%`)
                        } else if (value < 0) {
                          setValidationError('A probabilidade n√£o pode ser negativa')
                        } else {
                          setValidationError('')
                        }
                      }}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                        formData.probability > maxAllowed 
                          ? 'border-red-300 focus:ring-red-500' 
                          : 'border-gray-300 focus:ring-primary-500'
                      }`}
                    />
                    {maxAllowed < 100 && (
                      <div className="mt-1 text-xs text-gray-500">
                        Restam {maxAllowed.toFixed(1)}% dispon√≠veis para distribui√ß√£o
                      </div>
                    )}
                  </div>
                  {validationError && (
                    <div className="mt-2 text-sm text-red-600">
                      {validationError}
                    </div>
                  )}
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.isActive}
                      onChange={(e) => setFormData({...formData, isActive: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Produto Ativo</span>
                  </label>
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowForm(false)
                      setEditingProduct(null)
                      setFormData({ name: '', image: '', probability: 0, isActive: true, rotation: 0 })
                      setValidationError('')
                      setImageSource('url')
                      setUploadedImagePreview('')
                    }}
                    className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 font-medium transition-colors"
                  >
                    Cancelar
                  </button>
                  <button 
                    type="submit" 
                    className="px-4 py-2 rounded-md font-medium transition-colors bg-green-500 text-white hover:bg-green-600 disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed"
                    disabled={validationError !== '' || !formData.name.trim()}
                  >
                    {editingProduct ? 'Atualizar' : 'Adicionar'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

======== src/app/layout.tsx =========
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Shake To Go - Marketing Wheel',
  description: 'Spin the wheel and win amazing prizes from Shake To Go!',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="pt-BR">
      <body className={inter.className}>{children}</body>
    </html>
  )
}

======== src/app/api/products/route.ts =========
import { NextRequest, NextResponse } from 'next/server'
import { ProductService } from '@/lib/db-operations'

export async function GET() {
  try {
    const products = await ProductService.findAll()
    return NextResponse.json(products)
  } catch (error) {
    console.error('Failed to fetch products:', error)
    return NextResponse.json({ error: 'Failed to fetch products' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, image, probability, isActive, rotation } = body

    if (!name || probability === undefined) {
      return NextResponse.json({ error: 'Name and probability are required' }, { status: 400 })
    }

    const product = await ProductService.create({
      name,
      image: image || null,
      probability: parseFloat(probability),
      isActive: isActive !== undefined ? isActive : true,
      rotation: rotation !== undefined ? parseInt(rotation) : 0
    })

    return NextResponse.json(product)
  } catch (error) {
    console.error('Failed to create product:', error)
    return NextResponse.json({ error: 'Failed to create product' }, { status: 500 })
  }
}

======== src/app/api/products/active/route.ts =========
import { NextResponse } from 'next/server'
import { ProductService } from '@/lib/db-operations'

export async function GET() {
  try {
    const products = await ProductService.findActive()
    return NextResponse.json(products)
  } catch (error) {
    console.error('Failed to fetch active products:', error)
    return NextResponse.json({ error: 'Failed to fetch active products' }, { status: 500 })
  }
}

======== src/app/api/products/[id]/route.ts =========
import { NextRequest, NextResponse } from 'next/server'
import { ProductService } from '@/lib/db-operations'

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params
    const body = await request.json()
    const { name, image, probability, isActive, rotation } = body

    const updateData: any = {}
    if (name !== undefined) updateData.name = name
    if (image !== undefined) updateData.image = image
    if (probability !== undefined) updateData.probability = parseFloat(probability)
    if (isActive !== undefined) updateData.isActive = isActive
    if (rotation !== undefined) updateData.rotation = parseInt(rotation)

    const product = await ProductService.update(resolvedParams.id, updateData)
    
    if (!product) {
      return NextResponse.json({ error: 'Product not found' }, { status: 404 })
    }

    return NextResponse.json(product)
  } catch (error) {
    console.error('Failed to update product:', error)
    return NextResponse.json({ error: 'Failed to update product' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params
    const deleted = await ProductService.delete(resolvedParams.id)
    
    if (!deleted) {
      return NextResponse.json({ error: 'Product not found' }, { status: 404 })
    }

    return NextResponse.json({ message: 'Product deleted successfully' })
  } catch (error) {
    console.error('Failed to delete product:', error)
    return NextResponse.json({ error: 'Failed to delete product' }, { status: 500 })
  }
}

======== src/app/api/spin/route.ts =========
import { NextRequest, NextResponse } from 'next/server'
import { SpinService } from '@/lib/db-operations'

export async function POST(request: NextRequest) {
  try {
    const { productId } = await request.json()
    const clientIP = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown'

    if (!productId) {
      return NextResponse.json({ error: 'Product ID is required' }, { status: 400 })
    }

    // Record the spin
    const spin = await SpinService.create({
      productId,
      ipAddress: clientIP
    })

    return NextResponse.json(spin)
  } catch (error) {
    console.error('Failed to record spin:', error)
    return NextResponse.json({ error: 'Failed to record spin' }, { status: 500 })
  }
}

======== src/app/api/upload/route.ts =========
import { writeFile } from 'fs/promises'
import { NextRequest, NextResponse } from 'next/server'
import { join } from 'path'
import { nanoid } from 'nanoid'

export async function POST(request: NextRequest) {
  try {
    const data = await request.formData()
    const file: File | null = data.get('file') as unknown as File

    if (!file) {
      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 })
    }

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif']
    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json({ 
        error: 'Invalid file type. Only JPEG, PNG, WebP and GIF are allowed.' 
      }, { status: 400 })
    }

    // Validate file size (max 5MB)
    const maxSize = 5 * 1024 * 1024 // 5MB in bytes
    if (file.size > maxSize) {
      return NextResponse.json({ 
        error: 'File too large. Maximum size is 5MB.' 
      }, { status: 400 })
    }

    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)

    // Generate unique filename
    const fileExtension = file.name.split('.').pop()
    const uniqueId = nanoid(10)
    const filename = `upload-${uniqueId}.${fileExtension}`
    
    // Save to public/images directory
    const imagePath = join(process.cwd(), 'public', 'images', filename)
    await writeFile(imagePath, buffer)

    // Return the relative path for the database
    const relativePath = `/images/${filename}`
    
    return NextResponse.json({ 
      success: true, 
      path: relativePath,
      message: 'File uploaded successfully'
    })

  } catch (error) {
    console.error('Upload error:', error)
    return NextResponse.json({ 
      error: 'Failed to upload file' 
    }, { status: 500 })
  }
}

======== src/app/page.tsx =========
'use client'

import { useState, useEffect } from 'react'
import { Product } from '@/types'
import SpinWheel from '@/components/SpinWheel'
import PrizeModal from '@/components/PrizeModal'

export default function Home() {
  const [products, setProducts] = useState<Product[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [winner, setWinner] = useState<Product | null>(null)
  const [showModal, setShowModal] = useState(false)

  useEffect(() => {
    fetchActiveProducts()
  }, [])

  const fetchActiveProducts = async () => {
    try {
      const response = await fetch('/api/products/active')
      const data = await response.json()
      setProducts(Array.isArray(data) ? data : [])
    } catch (error) {
      console.error('Error fetching products:', error)
      setProducts([])
    } finally {
      setIsLoading(false)
    }
  }

  const handleSpin = async (winnerProduct: Product) => {
    try {
      // Record the spin in the database
      await fetch('/api/spin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId: winnerProduct.id }),
      })

      setWinner(winnerProduct)
      setShowModal(true)
    } catch (error) {
      console.error('Error recording spin:', error)
      // Still show the modal even if recording fails
      setWinner(winnerProduct)
      setShowModal(true)
    }
  }

  const handleCloseModal = () => {
    setShowModal(false)
    setWinner(null)
  }

  if (isLoading) {
    return (
      <main className="min-h-screen bg-gradient-to-br from-primary-50 to-primary-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-primary-500 mx-auto mb-4"></div>
          <p className="text-primary-600 text-xl">Carregando roleta...</p>
        </div>
      </main>
    )
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-primary-50 via-white to-primary-100 flex flex-col items-center justify-center p-4">
      {/* Header */}
      <div className="text-center mb-8">
        <h1 className="text-5xl font-black text-primary-800 mb-2 drop-shadow-lg">
          Shake To Go
        </h1>
        <p className="text-xl text-primary-600 font-semibold">
          üé≤ Gire a roleta e ganhe pr√™mios incr√≠veis! üé≤
        </p>
        <div className="w-24 h-1 bg-primary-500 mx-auto mt-4 rounded-full"></div>
      </div>

      {/* Spin Wheel */}
      <div className="flex-1 flex items-center justify-center">
        <SpinWheel products={products} onSpin={handleSpin} />
      </div>

      {/* Admin Link */}
      <div className="mt-8">
        <a
          href="/admin"
          className="text-sm text-primary-600 hover:text-primary-800 underline font-medium"
        >
          Acesso Administrativo
        </a>
      </div>

      {/* Prize Modal */}
      <PrizeModal
        isOpen={showModal}
        winner={winner}
        onClose={handleCloseModal}
      />
    </main>
  )
}

======== src/components/SpinWheel.tsx =========
"use client";

import { Product } from "@/types";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";

interface SpinWheelProps {
  products: Product[];
  onSpin: (winner: Product) => void;
}

export default function SpinWheel({ products, onSpin }: SpinWheelProps) {
  const [isSpinning, setIsSpinning] = useState(false);
  const [currentSector, setCurrentSector] = useState<Product | null>(null);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const imageCache = useRef<Map<string, HTMLImageElement>>(new Map());

  // Estado para √¢ngulo acumulado em graus
  const [wheelDeg, setWheelDeg] = useState(0);

  // Constantes para c√°lculo determin√≠stico
  const arcDeg = 360 / products.length;
  const pointerOffset = 90; // seta fixada em 12h -> 90¬∞

  // Pr√©‚Äëcarregamento de imagens
  const preloadImages = useCallback(() => {
    products.forEach((product) => {
      if (product.image && !imageCache.current.has(product.image)) {
        const img = new Image();
        img.onload = () => {
          imageCache.current.set(product.image!, img);
          // Redesenha assim que carregar
          setTimeout(() => {
            const canvas = canvasRef.current;
            if (canvas) {
              const ctx = canvas.getContext("2d");
              if (ctx) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                products.forEach((p, i) => drawSector(ctx, p, i));
              }
            }
          }, 100);
        };
        img.onerror = () => {
          console.error("Failed to load image:", product.image);
          imageCache.current.set(product.image!, new Image());
        };
        img.src = product.image;
      }
    });
  }, [products]);

  const drawSector = useCallback(
    (ctx: CanvasRenderingContext2D, product: Product, i: number) => {
      const rad = ctx.canvas.width / 2;
      const arc = (2 * Math.PI) / products.length;
      const sectorAng = arc * i;

      ctx.save();
      // Fundo do setor
      ctx.beginPath();
      ctx.fillStyle = i % 2 === 0 ? "#22c55e" : "#16a34a";
      ctx.moveTo(rad, rad);
      ctx.arc(rad, rad, rad, sectorAng, sectorAng + arc);
      ctx.lineTo(rad, rad);
      ctx.fill();

      if (product.image) {
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(rad, rad);
        ctx.arc(rad, rad, rad, sectorAng, sectorAng + arc);
        ctx.lineTo(rad, rad);
        ctx.clip();

        const imageSize = 40;
        const distanceFromCenter = 130;
        const centerAngle = sectorAng + arc / 2;
        const imageX =
          rad + Math.cos(centerAngle) * distanceFromCenter - imageSize / 2;
        const imageY =
          rad + Math.sin(centerAngle) * distanceFromCenter - imageSize / 2;

        const cachedImg = imageCache.current.get(product.image);
        if (cachedImg && cachedImg.complete && cachedImg.naturalWidth > 0) {
          ctx.save();
          ctx.beginPath();
          ctx.arc(
            imageX + imageSize / 2,
            imageY + imageSize / 2,
            imageSize / 2,
            0,
            2 * Math.PI
          );
          ctx.clip();

          if (product.rotation) {
            ctx.translate(imageX + imageSize / 2, imageY + imageSize / 2);
            ctx.rotate((product.rotation * Math.PI) / 180);
            ctx.drawImage(
              cachedImg,
              -imageSize / 2,
              -imageSize / 2,
              imageSize,
              imageSize
            );
          } else {
            ctx.drawImage(cachedImg, imageX, imageY, imageSize, imageSize);
          }
          ctx.restore();
        } else {
          // Placeholder
          ctx.save();
          ctx.beginPath();
          ctx.arc(
            imageX + imageSize / 2,
            imageY + imageSize / 2,
            imageSize / 2,
            0,
            2 * Math.PI
          );
          const hue = (i * 360) / products.length;
          ctx.fillStyle = `hsl(${hue}, 70%, 60%)`;
          ctx.fill();
          ctx.strokeStyle = "#fff";
          ctx.lineWidth = 3;
          ctx.stroke();

          ctx.fillStyle = "#fff";
          ctx.font = "bold 16px Arial";
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          const emojiMatch = product.name.match(
            /[\uD83C-\uDBFF][\uDC00-\uDFFF]|[\u2600-\u27FF]/
          );
          const emoji = emojiMatch ? emojiMatch[0] : product.name[0];
          ctx.fillText(emoji, imageX + imageSize / 2, imageY + imageSize / 2);
          ctx.restore();
        }

        ctx.restore();
      }

      ctx.restore();
    },
    [products.length]
  );

  const drawWheel = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || products.length === 0) return;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    products.forEach((p, i) => drawSector(ctx, p, i));
  }, [products, drawSector]);

  // Inicializa setor atual
  useEffect(() => {
    if (products.length > 0) {
      setCurrentSector(products[0]);
    }
  }, [products]);

  // Handler de fim de transi√ß√£o
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const handleTransitionEnd = () => {
      canvas.style.transition = 'none';
      setIsSpinning(false);
      if (selectedProduct) {
        onSpin(selectedProduct);
      }
    };

    canvas.addEventListener('transitionend', handleTransitionEnd);
    return () => canvas.removeEventListener('transitionend', handleTransitionEnd);
  }, [onSpin, selectedProduct]);

  const handleSpin = () => {
    if (isSpinning || products.length === 0) return;

    // Valida√ß√£o: soma das probabilidades
    const totalWeight = products.reduce((sum, p) => sum + p.probability, 0);
    if (totalWeight <= 0) {
      console.error("Soma das probabilidades deve ser maior que 0");
      return;
    }

    // 1. SELE√á√ÉO PONDERADA - escolhe o produto vencedor baseado na probability
    const rand = Math.random() * totalWeight;
    let selectedIdx = 0;
    let cum = 0;
    for (let i = 0; i < products.length; i++) {
      cum += products[i].probability;
      if (rand <= cum) {
        selectedIdx = i;
        break;
      }
    }

    const winner = products[selectedIdx];
    setSelectedProduct(winner);

    // 2. C√ÅLCULO DETERMIN√çSTICO - √¢ngulo final onde seta aponta para centro da fatia
    const sectorCenter = selectedIdx * arcDeg + arcDeg / 2;
    const targetDeg = pointerOffset - sectorCenter;

    // 3. VOLTAS EXTRAS para suspense (3-5 voltas completas)
    const extraRotations = 1080 + Math.random() * 720; // 3 a 5 voltas
    const finalDeg = wheelDeg + extraRotations + targetDeg;

    // 4. APLICA TRANSI√á√ÉO CSS
    const canvas = canvasRef.current!;
    canvas.style.transition = 'transform 3.6s cubic-bezier(.05,.82,.53,.99)';
    canvas.style.transform = `rotate(${finalDeg}deg)`;

    setIsSpinning(true);
    setWheelDeg(finalDeg);
    setCurrentSector(winner);
  };

  // Ciclo de efeitos
  useEffect(() => {
    drawWheel();
  }, [drawWheel]);

  useEffect(() => {
    preloadImages();
  }, [preloadImages]);

  return (
    <div className="flex flex-col items-center justify-center">
      <div className="relative inline-block">
        {/* Seta */}
        <div className="absolute top-[-25px] left-1/2 transform -translate-x-1/2 z-10 animate-pulse">
          <div className="relative">
            <div className="absolute top-[3px] left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-[18px] border-r-[18px] border-t-[32px] border-l-transparent border-r-transparent border-t-black opacity-30 -z-20" />
            <div className="absolute top-[-1px] left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-[19px] border-r-[19px] border-t-[34px] border-l-transparent border-r-transparent border-t-yellow-400 -z-10" />
            <div className="w-0 h-0 border-l-[16px] border-r-[16px] border-t-[30px] border-l-transparent border-r-transparent border-t-red-500 filter drop-shadow-md" />
          </div>
        </div>

        <canvas
          ref={canvasRef}
          width={400}
          height={400}
          className="block rounded-full shadow-2xl"
        />

        {/* Bot√£o de girar */}
        <div
          onClick={handleSpin}
          className={`absolute top-1/2 left-1/2 w-[30%] h-[30%] -ml-[15%] -mt-[15%]
            flex justify-center items-center
            rounded-full cursor-pointer select-none
            shadow-[0_0_0_8px_#22c55e,0_0_15px_5px_rgba(0,0,0,0.6)]
            transition-all duration-300 hover:scale-105
            ${isSpinning ? "pointer-events-none" : ""}
            overflow-hidden`}
          style={{
            backgroundColor: "#22c55e",
          }}
        >
          {!isSpinning && (
            <span className="relative z-10 text-center text-sm font-bold text-white drop-shadow-[2px_2px_4px_rgba(0,0,0,0.8)]">
              GIRAR!
            </span>
          )}

          {products.map((product) => (
            <img
              key={product.id}
              src={product.image || ""}
              alt={product.name}
              className={`absolute inset-0 w-full h-full object-cover rounded-full pointer-events-none ${(currentSector?.id === product.id && isSpinning) ? "opacity-100" : "opacity-0"}`}
            />
          ))}
        </div>
      </div>

      {/* Exibi√ß√£o do setor atual */}
      {currentSector ? (
        <div className="mt-4 text-center">
          <p className="text-green-600 font-semibold">
            {currentSector.name} ‚Äì {currentSector.probability}%
          </p>
        </div>
      ) : (
        <p className="mt-4 text-gray-500 text-center">
          Nenhum produto ativo dispon√≠vel para a roleta
        </p>
      )}
    </div>
  );
}


======== src/components/PrizeModal.tsx =========
'use client'

import { useEffect, useState } from 'react'
import { Product } from '@/types'

interface PrizeModalProps {
  isOpen: boolean
  winner: Product | null
  onClose: () => void
}

export default function PrizeModal({ isOpen, winner, onClose }: PrizeModalProps) {
  const [showAnimation, setShowAnimation] = useState(false)
  const [showProduct, setShowProduct] = useState(false)

  useEffect(() => {
    if (isOpen && winner) {
      setShowAnimation(true)
      // Delay showing the product for dramatic effect
      setTimeout(() => {
        setShowProduct(true)
      }, 1000)
    } else {
      setShowAnimation(false)
      setShowProduct(false)
    }
  }, [isOpen, winner])

  if (!isOpen || !winner) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 backdrop-blur-sm">
      <div className="relative w-full max-w-lg mx-4">
        {/* Background Animation Rings */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className={`w-96 h-96 rounded-full border-4 border-primary-300 opacity-30 ${showAnimation ? 'animate-ping' : ''}`}></div>
          <div className={`absolute w-80 h-80 rounded-full border-4 border-primary-400 opacity-50 ${showAnimation ? 'animate-ping' : ''} delay-200`}></div>
          <div className={`absolute w-64 h-64 rounded-full border-4 border-primary-500 opacity-70 ${showAnimation ? 'animate-ping' : ''} delay-500`}></div>
        </div>

        {/* Main Modal Content */}
        <div className={`relative bg-gradient-to-br from-white to-green-50 rounded-2xl p-8 text-center shadow-2xl transform transition-all duration-1000 ${
          showAnimation ? 'scale-100 opacity-100' : 'scale-50 opacity-0'
        }`}>
          
          {/* Workout-style Energy Burst */}
          <div className="absolute inset-0 rounded-2xl overflow-hidden">
            <div className={`absolute top-0 left-0 w-full h-full bg-gradient-to-r from-green-400 via-transparent to-green-400 opacity-20 ${
              showAnimation ? 'animate-pulse' : ''
            }`}></div>
            <div className={`absolute top-0 left-0 w-full h-full bg-gradient-to-b from-transparent via-green-200 to-transparent opacity-10 ${
              showAnimation ? 'animate-bounce' : ''
            }`}></div>
          </div>

          {/* Dynamic Sparkle Effects */}
          <div className="absolute top-4 left-4 w-4 h-4 bg-yellow-400 rounded-full animate-pulse"></div>
          <div className="absolute top-8 right-6 w-2 h-2 bg-yellow-300 rounded-full animate-ping delay-300"></div>
          <div className="absolute bottom-6 left-8 w-3 h-3 bg-yellow-500 rounded-full animate-bounce delay-700"></div>
          <div className="absolute bottom-4 right-4 w-2 h-2 bg-yellow-400 rounded-full animate-pulse delay-1000"></div>
          <div className="absolute top-1/2 left-2 w-1 h-1 bg-green-400 rounded-full animate-ping delay-500"></div>
          <div className="absolute top-1/3 right-2 w-1 h-1 bg-green-300 rounded-full animate-bounce delay-800"></div>

          {/* Congratulations Text with Workout Energy */}
          <div className={`mb-6 transform transition-all duration-700 delay-500 ${
            showProduct ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'
          }`}>
            <h1 className="text-5xl font-black text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-green-400 mb-2 animate-power-pulse">
              PARAB√âNS! üéâ
            </h1>
            <div className="text-lg text-gray-700 font-bold mb-2 animate-victory-bounce">
              üèÜ VOC√ä CONQUISTOU! üèÜ
            </div>
            <p className="text-base text-gray-600 font-semibold animate-shake-celebration">
              Seu pr√™mio exclusivo do Shake To Go!
            </p>
          </div>

          {/* Product Reveal */}
          <div className={`transform transition-all duration-1000 delay-1000 ${
            showProduct ? 'scale-100 opacity-100 rotate-0' : 'scale-75 opacity-0 rotate-12'
          }`}>
            
            {/* Product Image */}
            <div className="relative mb-6">
              <div className="w-32 h-32 mx-auto mb-4 relative">
                {/* Glow Effect */}
                <div className="absolute inset-0 bg-primary-200 rounded-full opacity-50 animate-energy-burst scale-110"></div>
                
                {winner.image ? (
                  <img
                    src={winner.image}
                    alt={winner.name}
                    className="w-full h-full object-cover rounded-full border-4 border-primary-500 shadow-lg relative z-10 animate-glow-intense"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-br from-primary-400 to-primary-600 rounded-full border-4 border-primary-500 shadow-lg flex items-center justify-center relative z-10 animate-glow-intense">
                    <span className="text-white text-4xl font-bold animate-power-pulse">ü•§</span>
                  </div>
                )}

                {/* Floating Stars with enhanced animations */}
                <div className="absolute -top-2 -right-2 w-8 h-8 text-yellow-400 animate-energy-burst">
                  ‚≠ê
                </div>
                <div className="absolute -bottom-2 -left-2 w-6 h-6 text-yellow-300 animate-victory-bounce delay-500">
                  ‚ú®
                </div>
                <div className="absolute -top-1 -left-1 w-4 h-4 text-yellow-500 animate-power-pulse delay-700">
                  üí´
                </div>
                <div className="absolute -bottom-1 -right-1 w-3 h-3 text-yellow-200 animate-shake-celebration delay-1000">
                  ‚ö°
                </div>
              </div>
            </div>

            {/* Product Name */}
            <div className="bg-gradient-to-r from-primary-500 to-primary-600 text-white px-6 py-3 rounded-full mb-6 shadow-lg">
              <h2 className="text-2xl font-bold animate-pulse" style={{ color: 'oklch(0.448 0.119 151.328)' }}>
                {winner.name}
              </h2>
            </div>

            {/* Success Message */}
            <div className="bg-green-50 border-2 border-green-200 rounded-lg p-4 mb-6">
              <p className="font-semibold text-lg" style={{ color: 'oklch(44.8% 0.119 151.328)' }}>
                üéä Seu pr√™mio est√° garantido! üéä
              </p>
              <p className="text-sm mt-1" style={{ color: 'oklch(44.6% 0.03 256.802)' }}>
                Apresente esta tela no balc√£o para retirar seu pr√™mio
              </p>
            </div>
          </div>

          {/* Close Button */}
          <button
            onClick={onClose}
            className={`bg-primary-500 hover:bg-primary-600 font-bold py-3 px-8 rounded-full transition-all duration-200 hover:scale-105 active:scale-95 shadow-lg transform ${
              showProduct ? 'translate-y-0 opacity-100 delay-1500' : 'translate-y-4 opacity-0'
            }`}
            style={{ color: 'oklch(37.3% 0.034 259.733)' }}
          >
            Fechar
          </button>
        </div>

        {/* Confetti Effect */}
        {showAnimation && (
          <div className="absolute inset-0 pointer-events-none">
            {[...Array(20)].map((_, i) => (
              <div
                key={i}
                className={`absolute w-2 h-2 bg-yellow-400 rounded-full animate-bounce`}
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 2}s`,
                  animationDuration: `${1 + Math.random()}s`
                }}
              ></div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}

======== src/lib/redis.ts =========
import Redis from 'ioredis'
import { nanoid } from 'nanoid'

const globalForRedis = globalThis as unknown as {
  redis: Redis | undefined
}

export const redis = globalForRedis.redis ?? new Redis({
  host: process.env.REDIS_HOST || 'localhost',
  port: parseInt(process.env.REDIS_PORT || '6379'),
  maxRetriesPerRequest: null,
})

if (process.env.NODE_ENV !== 'production') globalForRedis.redis = redis

// Helper functions for Redis operations
export const RedisKeys = {
  PRODUCTS_LIST: 'products:list',
  PRODUCTS_ACTIVE: 'products:active',
  SPINS_LIST: 'spins:list',
  product: (id: string) => `product:${id}`,
  spin: (id: string) => `spin:${id}`,
}

export const generateId = () => nanoid()

======== src/lib/db-operations.ts =========
import { redis, RedisKeys, generateId } from './redis'
import { Product, Spin, CreateProductInput, UpdateProductInput, CreateSpinInput } from '@/types'

// Product operations
export class ProductService {
  static async create(data: CreateProductInput): Promise<Product> {
    const id = generateId()
    const now = new Date().toISOString()
    
    const product: Product = {
      id,
      name: data.name,
      image: data.image || null,
      probability: data.probability,
      isActive: data.isActive !== undefined ? data.isActive : true,
      createdAt: now,
      updatedAt: now
    }

    // Store product hash
    await redis.hset(RedisKeys.product(id), product)
    
    // Add to products list
    await redis.lpush(RedisKeys.PRODUCTS_LIST, id)
    
    // Add to active list if active
    if (product.isActive) {
      await redis.lpush(RedisKeys.PRODUCTS_ACTIVE, id)
    }

    return product
  }

  static async findAll(): Promise<Product[]> {
    const productIds = await redis.lrange(RedisKeys.PRODUCTS_LIST, 0, -1)
    const products: Product[] = []

    for (const id of productIds) {
      const productData = await redis.hgetall(RedisKeys.product(id))
      if (Object.keys(productData).length > 0) {
        products.push({
          ...productData,
          probability: parseFloat(productData.probability),
          isActive: productData.isActive === 'true',
          rotation: productData.rotation ? parseInt(productData.rotation) : 0
        } as Product)
      }
    }

    return products.reverse() // Most recent first
  }

  static async findActive(): Promise<Product[]> {
    const productIds = await redis.lrange(RedisKeys.PRODUCTS_ACTIVE, 0, -1)
    const products: Product[] = []

    for (const id of productIds) {
      const productData = await redis.hgetall(RedisKeys.product(id))
      if (Object.keys(productData).length > 0 && productData.isActive === 'true') {
        products.push({
          ...productData,
          probability: parseFloat(productData.probability),
          isActive: true,
          rotation: productData.rotation ? parseInt(productData.rotation) : 0
        } as Product)
      }
    }

    return products.reverse() // Most recent first
  }

  static async findById(id: string): Promise<Product | null> {
    const productData = await redis.hgetall(RedisKeys.product(id))
    
    if (Object.keys(productData).length === 0) {
      return null
    }

    return {
      ...productData,
      probability: parseFloat(productData.probability),
      isActive: productData.isActive === 'true',
      rotation: productData.rotation ? parseInt(productData.rotation) : 0
    } as Product
  }

  static async update(id: string, data: UpdateProductInput): Promise<Product | null> {
    const existing = await this.findById(id)
    if (!existing) return null

    const updated: Product = {
      ...existing,
      ...data,
      updatedAt: new Date().toISOString()
    }

    // Update hash
    await redis.hset(RedisKeys.product(id), updated)

    // Update active list
    if (data.isActive !== undefined) {
      if (data.isActive) {
        // Add to active list if not already there
        const isInActiveList = await redis.lpos(RedisKeys.PRODUCTS_ACTIVE, id)
        if (isInActiveList === null) {
          await redis.lpush(RedisKeys.PRODUCTS_ACTIVE, id)
        }
      } else {
        // Remove from active list
        await redis.lrem(RedisKeys.PRODUCTS_ACTIVE, 0, id)
      }
    }

    return updated
  }

  static async delete(id: string): Promise<boolean> {
    const exists = await redis.exists(RedisKeys.product(id))
    if (!exists) return false

    // Remove from all lists
    await redis.lrem(RedisKeys.PRODUCTS_LIST, 0, id)
    await redis.lrem(RedisKeys.PRODUCTS_ACTIVE, 0, id)
    
    // Delete hash
    await redis.del(RedisKeys.product(id))

    return true
  }
}

// Spin operations
export class SpinService {
  static async create(data: CreateSpinInput): Promise<Spin> {
    const id = generateId()
    const now = new Date().toISOString()
    
    const spin: Spin = {
      id,
      productId: data.productId,
      timestamp: now,
      ipAddress: data.ipAddress || null
    }

    // Store spin hash
    await redis.hset(RedisKeys.spin(id), spin)
    
    // Add to spins list
    await redis.lpush(RedisKeys.SPINS_LIST, id)

    // Get product details
    const product = await ProductService.findById(data.productId)
    if (product) {
      spin.product = product
    }

    return spin
  }

  static async findAll(): Promise<Spin[]> {
    const spinIds = await redis.lrange(RedisKeys.SPINS_LIST, 0, -1)
    const spins: Spin[] = []

    for (const id of spinIds) {
      const spinData = await redis.hgetall(RedisKeys.spin(id))
      if (Object.keys(spinData).length > 0) {
        const spin: Spin = {
          id: spinData.id,
          productId: spinData.productId,
          timestamp: spinData.timestamp,
          ipAddress: spinData.ipAddress || null
        }
        
        // Get product details
        const product = await ProductService.findById(spin.productId)
        if (product) {
          spin.product = product
        }
        
        spins.push(spin)
      }
    }

    return spins.reverse() // Most recent first
  }
}

